Cloneable Elements

==About==
Makes form elements duplicateable.

The script duplicates an element in a form with class="cloneable". The object to to have a single script work for any number of elements, and have a minimum impact on the HTML form. This document explains how to make use of the script, but see the example folder for a more detailed use.

* github: https://github.com/deplicator/CloneableElements
* Live example: http://geekwagon.net/projects/cloneableElements/example

==How To Use==
===Cloneable Element===
There will need to be a DOM element in your HTML form with the class="cloneable". If it isn't obvious, this is the element that gets duplicated. This element can have other classes. It doesn't have to be a div (but div is recommended).

It is also recommended, but not required, this element be given an id. The script will add and increment a number after the id of duplicated elements. Cloneable elements without an id will be given an id of 'cloned'. This id will also be given a number and incremented, but if there are multiple cloneable elements on a page these id's will mean little (and presumably this won't matter if id's wen't used in the first place).

This element can also have a limit attribute that accepts a number (example limit="5"). Without this attribute the element can be duplicated an unlimited number of times. Having a limit is highly recommended.

The clonable element can have as many child elements of any type as required. Duplicated elements will be the same as the class="cloneable" template except for the noted differences.

The first difference is "cloneable" will be removed as a class. The duplicated elements will still retain other classes. Using .cloneable for styling could potentially result in the first element being different from the duplicates. In most cases it will be better to use a different class for styling.

The other difference is name attributes found within the cloneable element have a number appended to it's value. This is done so the duplicated input fields can be captured with the form action. In the minimum use example below, name="box" will become name="box2" in the first duplicate, name="box3" in the second, and so on. This is true of all name attributes, so it will work for <select> or any other element name is used.

===Button Element===
For the most part, the class="buttons" in the below example can be copied and pasted next to the class="cloneable" element. There are some options and some restrictions.

The most important restriction is that the element containing the buttons, and the class="clonable" element have to be sibling (within the same container) to work. Forms that need multiple cloneable elements will need to be separated. This can be done by placing them in a <div>, <span> is a good option to make the container unnoticeable  to the user, or <fieldset> is useful in this case.

The only other restriction is that the add button must be class="btnAdd", and the remove button must be class="btnDel". They can have other classes. Also, unlike the cloneable class, these will not change and can be used fro styling.

The element does not require a class or id; class="buttons" is only used in the minimum used example for easier reference.

The button's value does not have to be "add" and "remove", they can be changed to fit the form.

==Minimum Use Example==
<nowiki>
<div class="cloneable">

<input type="text" name="box">

</div>

<div class="buttons">

<input type="button" class="btnAdd" value="add" />

<input type="button" class="btnDel" value="remove" />

</div>

</nowiki>


==Tasks==
* Make unique id's added to cloneable classes when no id is found (currently gives same id for all).
